OnEnable() 메서드 완성하기
 magAmmo = magCapacity : 총이 활성화 될 때 현재 탄창에 탄알을 최대 용량까지 채움
 state = State.Ready : 총의 현재 상태를 발사 준비된 상태로 만듬
 lastFireTime = 0 : 마지막 발사 시점을 초기화
 
* 유니티 코루틴
 코루틴(coroutine)메서드는 대기 시간을 가질 수 있는 메서드 입니다.
 유니티에서 코루틴 메서드는 IEnumerator 타입을 반환해야 합니다.
 처리가 일시 대기할 곳에 yield 키워드를 명시해야 합니다.
 ex)
 void CleaningHouse(){
  //A 방 청소
  //B 방 청소
  //C 방 청소
 }
 -> 논스톱으로 A~C까지 청소 처리가 진행
 ex)
 IEnumerator CleaningHouse(){
  //A방 청소
  yield return new waitForSeconds(10f); //10초 동안 쉬기
  //B 방 청소
  yield return new waitForSeconds(20f); //20초 동안 쉬기
  //C 방 청소
 }
 ...
 StartCoroutine(CleaningHouse());
 -> A 실행 후 10초 쉬고 B 실행 후 20초 쉬고 C 실행

 코루틴 문법
  초 단위로 쉬기 : yield return new waitForSeconds(시간);
  한 프레임 쉬기 : yield return null;
  StartCoroutine() 메서드는 두 가지 방법으로 실행 할 코루틴 메서드를 입력 받습니다.
   1. StartCoroutine(SomeCoroutine()); // 코루틴 메서드를 실행한 반환 값
   -> 실행 할 코루틴 메서드에 입력값을 직접 전달 가능
   2. StartCoroutine("SomeCoroutine"); // 코루틴 메서드의 이름
   -> 나중에 StopCoroutine()메서드를 통해 실행 중인 코루틴 메서드를 도중에 종료할 수 있음

ShotEffect() 메서드 완성하기
 사격효과를 재생 및 탄알 궤적 그리기
 번쩍이는 탄알 궤적을 구현하려면 라인 렌더러를 켜서 선을 그린 다음 라인 렌더러를 다시 꺼야 합니다.
 이 라인렌더러를 끄고 켜는 사이에 대기시간이 필요합니다.
 이 때 코루틴이 사용

 파티클 시스템으로 정의된 효과는 Play() 메서드를 통해 재생
 muzzleFlashEffect.Play(); : 총구 화염 배출 효과
 shellEjectEffect.Play(); : 탄피 배출 효과

 총 쏘는 소리를 오디오 소스의 PlayOneShot() 메서드로 재생
 gunAudioPlayer.PlayOneShot(shotClip);
 *이전의 오디오 소스 컴포넌트를 실행 할 때에는 Play() 메서드를 사용하였고
  Play() 메서드는 이미 재생 중인 오디오가 있다면 정지하고 처음부터 오디오를 다시 재생
  하지만 총 연사 소리처럼 연달아 재생하는 경우에는 맞지 않음
  PlayOneShot() 메서드는 재생할 오디오 클립을 입력 받고, 재생할 오디오와 이미 재생 중인 오디오를 중첩하여 재생

 탄알 궤적 그리기 bulletLineRenderer.SetPosition(int, Vector3)
  bulletLineRenderer.SetPosition(0, fireTransform.Position) // 라인 렌더러 컴포넌트가 그리는 선분의 첫 번째 점
  bulletLineRenderer.SetPosition(1, hitPosition) // 라인 렌더러 컴포넌트가 그리는 선분의 두 번째 점
  bulletLineRenderer.enabled = true; // 비 활성화 되어있는 라인렌더러 활성화 하여 그리기
  yield return new waitForSeconds(0.03f); // 0.03초 동안 처리 쉬기
  bulletLineRenderer.enabled = false; // 활성화 되어 있는 라인렌더러를 비활성화 및 그려진 궤적 삭제

Fire() 메서드 완성하기
 첫 번째 조건으로 총의 현재 상태 state 값이 총을 발사한 준비 상태 State.Ready인지 검사합니다.
 총 발사 시 발사 간격인 timeBetFire만큼 시간이 지나야 총을 발사 할 수 있습니다.
 따라서 두 번째 조건으로 Time.time >= lastFireTime+timeBetFire를 사용해서
 '현재 시간'이 '총을 최근에 발사한 시점 + 발사간격' 이후 인지를 검사합니다.

 if (state == State.Ready && Time.time >= lastTimeFire + timeBetFire){
  lastFireTime = Time.time;
  Shot();

* 레이 캐스트
 레이캐스트는 보이지 않은 광선을 쐈을 때 광선이 다른 콜라이더와 충돌하는지 검사하는 처리 입니다.
 이 때 사용하는 광선을 레이라고 부르며 Ray 타입으로 레이의 정보만 따로 표현할 수 도 있습니다.
 레이캐스트를 실행했을 때 레이가 콜라이더를 가진 게임 오브젝트와 충돌하면 RaycastHit 타입으로 충돌 정보가 생성
 생성된 Raycasthit 오브젝트를 살펴보면 레이와 충돌한 게임 오브젝트, 총돌한 위치, 충돌한 표면의 방향 등을 알 수 있음

 FPS, TPS 등의 슈터 게임은 대부분 레이캐스트를 이용해 총을 구현

Shot() 메서드 완성하기
 RaycastHit hit : 충돌 정보를 hit에 저장
 Vector3 hitPosition = Vector3.zero : 탄알이 맞은 곳을 hitPosition 변수에 저장
 if (Physics.Raycast(fireTransform.position, fireTransform.forward, out hit, fireDistance))
 레이캐스트를 이용하여 총을 쏘고, 총에 맞은 오브젝트가 있는지 검사

 (bool) Physics.Raycast() : 레이를 쏴서 레이와 충돌한 콜라이더가 있는지 검사 (있다면 true, 없다면 false)
 Raycast 메서드는 다양한 형태로 매게변수를 받을 수 있습니다.

 이번에 사용된 종류는 (Vector3 orgin, Vector3 direction, RaycastHit hitInfo, float maxDistance) 입니다
  Vector3 origin : 레이의 시작점 -> fireTransform.position
  Vector3 direction : 레이의 방향 -> fireTransform.forward
  RaycastHit hitInfo : 레이가 충돌 한 경우 hitInfo에 자세한 충돌 정보가 채워짐 -> out hit
  float maxDistance : 레이 충돌을 검사할 최대 거리 -> fireDistance
 *out 키워드 : 메서드가 return 이외의 방법으로 추가 정보를 반환할 수 있게 만듭니다.
                  out 키워드로 입력된 변수는 메서드 내부에서 변경된 사항이 반영 된 채로 돌아오기 때문
 Raycast() 메서드는 자신의 내부에서 hitInfo에 충돌정보를 채웁니다.
 Raycast() 메서드가 종료되었을 때 변경 사항이 유지된 채로 hitInfo가 되돌아 옵니다.
 
 레이가 충돌하였다면 if 문이 실행됨과 동시에, 충돌한 대상으로부터 IDamageable컴포넌트를 가져와 target에 할당
 IDamageable target = hit.collider.GetComponent<IDamageable>();
 * 컴포넌트를 추출하여 변수에 저장하려면 같은 컴포넌트타입이어야 가능하다
 
 가져온 IDamageable 컴포넌트가 null이 아니라면
 -> 충돌한 상대방 게임 오브젝트가 OnDamage가 구현되어 있는 '공격받을 수 있는' 게임 오브젝트란 것을 의미
 if( target != null) {
  target.OnDamage(damage, hit.point, hit.normal)
 }
 damage는 탄알의 damage 값, hit.point : 레이캐스트의 충돌위치, hit.normal : 레이캐스트가 충돌한 표면의 방향
 
 레이가 충돌하지 않으면 else블록이 실행되며
 else 블록에서는 탄알이 최대 사정거리 까지 날아 갔을 때의 위치를 계산하여 hitPosition에 저장
 hitPosition = fireTransform.position+fireTransform.foward*fireDistance (백터 계산이기 때문에 위치+방향*거리)
 
 레이캐스트 처리가 끝나면 코루틴으로 처리된 발사 이펙트를 실행
 StartCoroutine(ShotEffect(hitPosition));

 총알이 발사되었으므로, 탄창의 남은 총알을 -1 해주는데
 이때 탄창에 총알이 없다면 총의 현재상태를 empty로 갱신

 magAmmo--;
 if (magAmmo <=0){
  state = State.Emtpy;
 }

Reload() 메서드 완성하기
 Reload() 메서드는 재장선 시도 메서드, 재장전에 성공하면 true, 재장전을 할 수 없는 상태면 false
 재장전은 재장전 대기시간이 필요하기 때문에 실질적인 재장전은 코루틴 메서드인 ReloadRoutine()에서 수행
 public bool Reload(){
  if(state==State.Reloading || ammoRemain<=0 || magAmmo >= magCapacity){
   return false;
   }
  StartCoroutine(ReloadRoutine());
  return true;
  }
 먼저 if문을 통하여 재장전이 가능한 상태인지 검사
  state==State.Reloading : 이미 재장전 중인지
  ammoRemain<=0 : 전체 탄약이 0발 이하인지
  magAmmo>=magCapacity : 현재 탄창의 남은 탄약이 가득 차 있는지
 이 셋중 하나라도 적중된다면 재장전 할 수 없는 상태 -> return false
 else라면 재장전 Coroutine인 ReloadRoutine()을 실행하고 재장전 가능한 상태임을 return true를 사용

ReloadRoutine() 코루틴 메서드 완성하기
 ReloadRoutine() 탄창에 탄알을 채우고, 재장전 소리를 재생하며, 
 재장전 시간 동안 총의 다른 기능이 동작하지 않도록 총을 잠금
 state = State.Reloading : 총의 현재상태를 재장전 중 상태로 변경
 gunAudioPlayer.PlayOneShot(reloadclip) : 총의 재장전 효과음을 재생
 yield return new waitForSeconds(reloadTime); : 총의 재장전 시간 만큼 대기시간을 검
 int ammoToFill : 탄창에 채워야 할 탄알의 수를 계산
 if (ammoToFill> ammoRemain) : 만약 채워야 할 총알이 총 남아있는 총알보다 많은 경우
 ammoToFill=ammoReamin : 있는 만큼만 채워진다.
 magAmmo = magAmmo+ammoToFill : 현재 남아 있는 총알에 필요한 총알 만큼 채워진다
 ammoReamin = ammoRemain-ammoToFill : 전체 총알에서 필요한 만큼 나간 총알개수를 빼준다
 state = State.Ready : 총의 현재 상태를 준비된 상태로 변경

 
 
