(2) 다형성을 사용한 패턴

ex3)
 public void WarCry() {
  Debug.Log("전투함성");
   // 모든 Monster 오브젝트를 찾아 공격력을 10 증가시킴
  Monster[] monsters = FindObjectOfType<Monster>();
  for (int i = 0; i<monsters.Length; i++){
   monsters[i].damage += 10;
  }
 }
 
 FindObjectOfType<>() : 씬에서 명시한 타입의 모든 오브젝트를 찾아 배열로 반환합니다.
 -> Monster[] monsters = FindObjectOfType<Monster>(); : 씬에서 Monster 타입의 모든 오브젝트를 찾아 monster 배열로 저장합니다.
 여기서 다형성에 의해 Orc타입과 Dragon타입은 Monster 타입으로 취급할수 있으므로 FindObjectOfType<Monster>()는 Orc타입과 Dragon 타입의 오브젝트도 찾아냅니다.
 이들은 Monster 타입을 상속했기 때문에 damage 변수를 가지고 있습니다.
 따라서 monsters 배열에 저장된 모든 오브젝트의 damage에 접근해 공격력을 증가시킬 수 있습니다.

오버라이드
 메서드에서 다형성을 적용하여 같은 이름의 메서드가 서로 다른 방식으로 동작하게 할 수 있습니다.
 그러한 방법 중 하나가 '오버라이드' 입니다.
 오버라이드는 부모 클래스에서 작성한 메서드를 자식 클래스에서 재정의 하는 것 입니다.
 
 ex) 게임 속 모든 몬스터를 공격 기능의 기본 동작은 동일하지만 공격 대사는 다르게 구현한다고 가정해봅시다.
  public class Monster : MonoBehaviour {
   public virtual void Attack() {
    Debug.Log("공격!");
   }
  }
  public class Orc : Monster { 
   public override void Attack() {
    base.Attack();
    Debug.Log("우리는 노예가 되지 않는다!");
   }
  }
  public class Dragon : Monster {
   public override void Attack() {
    base.Attack();
    Debug.Log("모든 것이 불타오를 것이다!")
   }
  }
  Virtual 키워드로 지정된 메서드는 가상 메서드가 됩니다.
  가상 메서드는 자식 클래스가 오버라이드 할 수 있도록 허용된 메서드입니다.
  자식 클래스는 override 키워드를 사용해 부모 클래스의 가상 메서드를 재 정의 할 수 있습니다.

  여기서 Orc타입의 오브젝트를 Monster 타입의 변수에 저장하고 Attack() 메서드를 실행했다고 가정
  Orc orc = FindObjectOfType<Orc>();
  Monster monster = orc;
  monster.Attack(); // Orc의 Attack이 실행됨
  monster.Attack(); 이 실행되면 Orc클래스에서 재정의한 Attack() 메서드가 실행됩니다.
  따라서 '공격!'과 '우리는 노예가 되지 않는다!'라는 로그가 순서대로 출력됩니다.
  즉, 기존 메서드를 부모타입으로 실행해도 실제로는 자식 타입에서 재 정의한 메서드가 실행됩니다.
  
 *Base
  자식이 부모의 메서드를 오버라이드 할 때는 부모 메서드의 원형을 유지하면서 확장할 수도 있고, 
  완전히 처음부터 메서드를 다시 만들 수도 있습니다.
  ex)
   public class Orc : Monster { 
    public override void Attack(){
     base.Attack(); // Monster의 Attack()이 실행됨
     Debug.Log("우리는 노예가 되지 않는다!");
    }
   }
  base.Attack();은 부모 클래스인 Monster의 Attack() 메서드를 실행합니다. 
  base 키워드는 부모 클래스를 지칭하며, base를 사용해 오버라이드되기 전의 원형 메서드로 접근할수 있습니다.
  만약 base.Attack();을 사용하지 않았다면, Orc에서 Monster의 Attack() 메서드를 확장하는 것이 아니라 바닥부터 새롭게 만드는 것이 됩니다.

! LivingEntity 기반 클래스
 적 AI와 플레이어 캐릭터를 포함해 게임 속 생명체들은 몇 가지 공통 기능을 가져야 합니다.
  1. 체력을 가진다.
  2. 체력을 회복 할 수 있다.
  3. 공격을 받을 수 있다.
  4. 살거나 죽을 수 있다.
 
 (1) LivingEntity 전체 스크립트
  public class LivingEntity : MonoBehaviour, IDamageable 
  -> LivingEntity클래스가 IDamageable 인터페이스를 상속받으므로 OnDamage메서드를 구현해야 합니다.

 (2) LivingEntity의 필드
  public float StartingHealth = 100f; // 시작 체력
  public float health { get; protected set; } // 현재 체력
  public bool dead { get; protected set; } // 사망 상태
  public event Action onDeath; // 사망 시 발동할 이벤트
  
  StartingHealth는 LivingEntity가 활성화 될 때 할당 될 기본 체력입니다.
  health는 현재 체력을 나타내며, dead는 사망상태를 나타냅니다.
  여기서 health와 dead는 public get과 protected set으로 설정된 프로퍼티 입니다.
  *protected 접근 한정자로 지정된 멤버는 클래스 외브에서는 접근 불가능 하지만, 자식클래스에서는 접근 가능합니다.
  따라서 health와 dead는 외부 클래스에서 변경할 수 는 없지만, LivingEntity를 상속하는 자식 클래스에서는 변경할 수 있습니다.
  
  event Action OnDeath; 에서 OnDeath는 사망 시 발동될 이벤트입니다.
  OnDeath 이벤트에는 사망시 실행할 메서드들이 등록됩니다.
  OnDeath를 통해 LivingEntity 오브젝트가 죽었을 때 어떤 일이 발생할지 결정할 수 있습니다.
